<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<jsp:root 
  xmlns:c="http://java.sun.com/jsp/jstl/core"
  xmlns:fn="http://java.sun.com/jsp/jstl/functions"
  xmlns:fmt="http://java.sun.com/jsp/jstl/fmt"
  xmlns:jsp="http://java.sun.com/JSP/Page"
  xmlns:spring="http://www.springframework.org/tags"
  xmlns:fx="http://igd.fraunhofer.de/tags/elfunctions"
  version="2.0"
  >
  <jsp:output omit-xml-declaration="yes" />

  <jsp:directive.attribute name="projection" type="java.lang.String" required="true" rtexprvalue="true"/>
  <jsp:directive.attribute name="maxExtent" type="java.lang.String" required="true" rtexprvalue="true"/>
  <jsp:directive.attribute name="restrictedExtent" type="java.lang.String" required="true" rtexprvalue="true"/>
  <jsp:directive.attribute name="resolutions" type="java.lang.String" required="true" rtexprvalue="true"/>
  <jsp:directive.attribute name="units" type="java.lang.String" required="true" rtexprvalue="true"/>
  <jsp:directive.attribute name="layersOneType" type="java.lang.String" required="true" rtexprvalue="true"/>
  <jsp:directive.attribute name="layersOneParams" type="java.lang.String" required="true" rtexprvalue="true"/>
  <jsp:directive.attribute name="layersTwoType" type="java.lang.String" required="true" rtexprvalue="true"/>
  <jsp:directive.attribute name="layersTwoParams" type="java.lang.String" required="true" rtexprvalue="true"/>
  <jsp:directive.attribute name="layersPoiType" type="java.lang.String" required="true" rtexprvalue="true"/>
  <jsp:directive.attribute name="layersPoiParams" type="java.lang.String" required="true" rtexprvalue="true"/>
  <jsp:directive.attribute name="oviMargin" type="java.lang.String" required="false" rtexprvalue="true"/>
  <jsp:directive.attribute name="ovi" type="java.lang.String" required="true" rtexprvalue="true"/>
  <jsp:directive.attribute name="cssStyle" type="java.lang.String" required="false" rtexprvalue="true"/>
  <jsp:directive.attribute name="vorgangTyp" type="java.lang.String" required="false" rtexprvalue="true"/>
  <jsp:directive.attribute name="vorgangStatus" type="java.lang.String" required="false" rtexprvalue="true"/>

  <c:if test="${empty projection}">
    <c:set var="projection" value="EPSG:25833"/>
  </c:if>
  <c:if test="${empty oviMargin}">
    <c:set var="oviMargin" value="400"/>
  </c:if>

  <div id="map" class="smallmap" style="${cssStyle}"><!-- //OpenLayers --></div>

  <c:url value="/script/openLayers/theme/default/style.css" var="url"/>
  <link rel="stylesheet" href="${url}" type="text/css"><!-- //OpenLayers Style --></link>
  <c:url value="/script/openLayers/OpenLayers.js" var="url"/>
  <script src="${url}" type="text/javascript"><!-- //OpenLayers --></script>
  <c:url value="/script/openLayers/theme/dark/" var="url"/>

  <c:url value="/images/${vorgangTyp}_${vorgangStatus}_45.png" var="icon"/>

  <script type="text/javascript">
var map, vlayer;
var formater;

var bounds = new OpenLayers.Bounds(${maxExtent});
function initOpenLayers() {
  //Theme definieren
  OpenLayers.ImgPath = "${url}";

  //Formater definieren
  var formatOptions = {
    'internalProjection': new OpenLayers.Projection('${projection}'),
    'externalProjection': new OpenLayers.Projection('${projection}')
  };
  formater = new OpenLayers.Format.WKT(formatOptions);

  //Layer für OVI konfigurieren
  var vlayerstylemap = new OpenLayers.StyleMap({pointRadius: 15, graphicWidth: 24, graphicHeight: 29, graphicXOffset: -3, graphicYOffset: -27, externalGraphic: "${icon}"});
  vlayer = new OpenLayers.Layer.Vector("aktuelle Position", {styleMap: vlayerstylemap});

  //Layer für OVI initialisieren
  var initFeature = formater.read('${ovi}');
  if (initFeature) {
    if (initFeature.constructor != Array)
      initFeature = [initFeature];
    vlayer.addFeatures(initFeature);
    if (initFeature[0]) {
      initBounds = initFeature[0].geometry.getBounds();
      initBounds.left = initBounds.left - ${oviMargin};
      initBounds.right = initBounds.right + ${oviMargin};
      initBounds.top = initBounds.top + ${oviMargin};
      initBounds.bottom = initBounds.bottom - ${oviMargin};
    }
  }

  //Controls
  //Zoomen auf den ausgewählten Bereich
  control_zoomBox = new OpenLayers.Control.ZoomBox({title: 'auf Kartenausschnitt zoomen'});
  //Ansicht vor und zurück
  control_navigationHistory = new OpenLayers.Control.NavigationHistory();
  control_navigationHistory.previous.title = 'Ansicht zurück';
  control_navigationHistory.next.title = 'Ansicht vor';
  //Toolbar
  editingToolbar = new OpenLayers.Control.EditingToolbar(vlayer);
  //Control: Karte verschieben
  control_navigation = editingToolbar.controls[0];
  //Control: OVI einzeichnen
  control_drawFeaturePoint = editingToolbar.controls[1];
  //Control: maximal herauszoomen
  control_zoomToMaxExtent = new OpenLayers.Control.ZoomToMaxExtent({title: 'ganze Kartenausdehnung anzeigen'});
  //Control: Zoom in
  control_zoomIn = new OpenLayers.Control.ZoomIn({title: 'in Karte hineinzoomen'});
  //Control: Zoom out
  control_zoomOut = new OpenLayers.Control.ZoomOut({title: 'aus Karte herauszoomen'});

  map = new OpenLayers.Map('map', {
    controls: [
      new OpenLayers.Control.LayerSwitcher({roundedCorner: false}),
      new OpenLayers.Control.PanZoomBar(),
      new OpenLayers.Control.Navigation(),
      new OpenLayers.Control.MousePosition({numDigits: 0, suffix: ' m Nord ETRS89/UTM-33N', separator: ' m Ost, '}),
      editingToolbar,
      control_zoomToMaxExtent
    ],
    projection: '${projection}',
    resolutions: [${resolutions}],
    units: '${units}',
    restrictedExtent: new OpenLayers.Bounds(${restrictedExtent}),
    maxExtent: bounds
  });

  map.addLayer(new OpenLayers.Layer.${layersOneType}(${layersOneParams}));
  map.addLayer(new OpenLayers.Layer.${layersTwoType}(${layersTwoParams}));
  <c:if test="${not empty layersPoiType}">
  map.addLayer(new OpenLayers.Layer.${layersPoiType}(${layersPoiParams}));
  </c:if>

  map.addLayer(vlayer);

  map.addControl(control_navigationHistory);
  editingToolbar.addControls([control_navigationHistory.previous, control_navigationHistory.next, control_zoomBox, control_zoomToMaxExtent, control_zoomOut, control_zoomIn]);

  editingToolbar.controls = [control_navigationHistory.next, control_navigationHistory.previous, control_zoomToMaxExtent, control_zoomBox, control_zoomOut, control_zoomIn, control_navigation];

  editingToolbar.redraw();
  editingToolbar.activateControl(control_navigation);

  //initial Zoomen
  map.zoomToExtent(initBounds);

  $('div.olControlNavigationItemActive').attr("title", "Karte verschieben");
  $('div.olControlNavigationItemInactive').attr("title", "Karte verschieben");
  $('div.olControlDrawFeaturePointItemActive').attr("title", "Position setzen");
  $('div.olControlDrawFeaturePointItemInactive').attr("title", "Position setzen");
  $('img#OpenLayers_Control_MaximizeDiv_innerImage').attr("title", "Karteninhalte ändern");
  $('img#OpenLayers_Control_MaximizeDiv_innerImage').attr("style", "cursor:pointer");
}

initOpenLayers();
  </script>

</jsp:root>
